<?xml version="1.0"?>
<!-- ***** BEGIN LICENSE BLOCK *****
   - Version: MPL 1.1/GPL 2.0/LGPL 2.1
   -
   - The contents of this file are subject to the Mozilla Public License Version
   - 1.1 (the "License"); you may not use this file except in compliance with
   - the License. You may obtain a copy of the License at
   - http://www.mozilla.org/MPL/
   -
   - Software distributed under the License is distributed on an "AS IS" basis,
   - WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
   - for the specific language governing rights and limitations under the
   - License.
   -
   - The Original Code is "PDF Download".
   -
   - The Initial Developer of the Original Code is Denis Remondini.
   - Portions created by the Initial Developer are Copyright (C) 2005-2007 Denis Remondini.  
   - All Rights Reserved.
   -
   - Contributor(s): Denis Remondini <denistn AT gmail DOT com>
   -
   - Alternatively, the contents of this file may be used under the terms of
   - either the GNU General Public License Version 2 or later (the "GPL"), or
   - the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
   - in which case the provisions of the GPL or the LGPL are applicable instead
   - of those above. If you wish to allow use of your version of this file only
   - under the terms of either the GPL or the LGPL, and not to allow others to
   - use your version of this file under the terms of the MPL, indicate your
   - decision by deleting the provisions above and replace them with the notice
   - and other provisions required by the LGPL or the GPL. If you do not delete
   - the provisions above, a recipient may use your version of this file under
   - the terms of any one of the MPL, the GPL or the LGPL.
   -
   - 
***** END LICENSE BLOCK ***** -->

<?xml-stylesheet href="chrome://global/skin/" type="text/css"?>
<?xml-stylesheet href="chrome://pdfdownload/skin/pdfdownload.css" type="text/css"?>
<!DOCTYPE window SYSTEM "chrome://pdfdownload/locale/pdfdownload.dtd">


<window class="dialog"
    id="PDFDownload-question-window"
    title="PDF Download"
    orient="horizontal"
    align="stretch"
    onload="sizeToContentTrick(); disableBtns(window.arguments[0].url,window.arguments[1]); getFileSize(window.arguments[0].url);"
    xmlns:html="http://www.w3.org/1999/xhtml"
    xmlns="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul">
	
	<stringbundle id="strings" src="chrome://pdfdownload/locale/pdfdownload.properties"/>


	<script type="application/x-javascript">
		<![CDATA[

			var strbundle;	
			var sltPrefs = Components.classes['@mozilla.org/preferences-service;1']
                                  .getService(Components.interfaces.nsIPrefBranch);
	

			// Cancel button handler
			function doCancel() {
				window.arguments[0].res = "cancel";
				window.close();
			}

			// Download button handler
			function doDownload() {
				window.arguments[0].res = "download";
				window.close();
			}

			// Open button handler
			function doOpen() {
				window.arguments[0].res = "open";
				window.close();
			}

			// Open button handler
			function doOpenHtml() {
				window.arguments[0].res = "openHtml";
				window.close();
			}

			// Open normally button handler
			function doOpenWithoutExtension() {
				window.arguments[0].res = "openWithoutExtension";
				window.close();
			}

			function disableBtns(url,ext) {
				/*
				 * If it is a pdf.gz file, we disable the open button because usually a 
				 * pdf viewer is not able to open this kind of file.
				 */
				if (ext == "pdf.gz") {
					document.getElementById("open-button").disabled = true;
				}
				if (isLinkType("file:",url) || (url.indexOf("//localhost") != -1) || (url.indexOf("//127.0.0.1") != -1)) {
					document.getElementById("openHTML-button").disabled = true;
				}
			}
				
			// Checks the type of a link
			function isLinkType(linktype, link) {
				try {
					var protocol = link.substr(0, linktype.length);
					return protocol.toLowerCase() == linktype;
				} catch(e) {
					return false;
				}
			}
	

			function sizeToContentTrick() {
				/*
				 * Workaround to sizeToContent bug (Bug 91137)
				 */
				var xulWindow = document.getElementById("PDFDownload-question-window");
				var wdth = window.innerWidth; // THIS IS NEEDED,
				window.sizeToContent();
				xulWindow.setAttribute("width",window.innerWidth + 30);

				var hght = window.innerHeight; // THIS IS NEEDED,
				window.sizeToContent();
				xulWindow.setAttribute("height",window.innerHeight + 30);     
			}

			function getFileSize(url) {
				var xmlhttp
				var done = 0;
				strbundle = document.getElementById("strings");
				var part1 = strbundle.getString("questionPart1");				
				var descr = document.getElementById("QuestionLabel");
				try {
					xmlhttp = new XMLHttpRequest();
				} catch (e) {
					xmlhttp = false;
				}
				if (xmlhttp) {
					xmlhttp.open("HEAD", url, true);
					xmlhttp.onreadystatechange=function() {
						if (xmlhttp.readyState == 4) {
							if (xmlhttp.status == 200) {
								var size = xmlhttp.getResponseHeader("Content-Length");					
								if (size >= 1024*1024) {
									size = size / (1024*1024);
									part1 = part1 + " (" + size.toFixed(1) + " MB)" ;
								} else if (size >= 1024) {
									size = size / 1024;
									part1 = part1 + " (" + parseInt(size + .5) + " KB)";
								} else if (size != null) {
									part1 = part1 + " (" + size + " bytes)";
								}
								descr.value = part1 + strbundle.getString("questionPart2");
								done = 1;
							} else if (done == 0) {
								descr.value = part1 + strbundle.getString("questionPart2");
							} 
						} else if (done == 0) {
							descr.value = part1 + strbundle.getString("questionPart2");
						}	 
					}
					xmlhttp.send(null);
				}
			}

			function isTooltipEnabled() {
				if (!sltPrefs.prefHasUserValue("extensions.pdfdownload.showTooltips")) {
					sltPrefs.setBoolPref("extensions.pdfdownload.showTooltips",true);
				}
				return sltPrefs.getBoolPref("extensions.pdfdownload.showTooltips");
			}
		
			function onTooltipPopupShowing(popup) {
				var diff = popup.boxObject.height - popup.firstChild.boxObject.height;
				popup.sizeTo(popup.boxObject.width, popup.firstChild.boxObject.height + diff);
				return true;
			}

			function onMouseOver(e,toolTipName,obj) {
				if (isTooltipEnabled()) {
					var xulWindow = document.getElementById("PDFDownload-question-window");
					var popup = document.getElementById(toolTipName);
					var diff = popup.boxObject.height - popup.firstChild.boxObject.height;
        
					popup.sizeTo(popup.boxObject.width, popup.firstChild.boxObject.height + diff);
					popup.showPopup(obj, e.clientX+xulWindow.boxObject.screenX-(popup.boxObject.width/2), xulWindow.boxObject.screenY+window.innerHeight-10, "tooltip", "bottomleft", "topleft");
				}
			}

			function onMouseOut(toolTipName) {
				var popup = document.getElementById(toolTipName);
				popup.hidePopup();
			}

		]]>
	</script>

	<keyset>
		<key id="enter" keycode="VK_RETURN" oncommand="doOpen();"/>
		<key id="escape" keycode="VK_ESCAPE" oncommand="doCancel();"/>
	</keyset>

	<tooltip id="downloadTooltip" orient="vertical"
	   onpopupshowing="return onTooltipPopupShowing(this);">
		<vbox>
			<label class="tooltipTitle">&pdfdownload.downloadButton;</label>
			<label>&pdfdownload.tooltip.downloadButton;</label>
		</vbox>
		<spacer flex="1"/>
	</tooltip>

	<tooltip id="openTooltip" orient="vertical"
	   onpopupshowing="return onTooltipPopupShowing(this);">
		<vbox>
			<label class="tooltipTitle">&pdfdownload.openButton;</label>
			<label>&pdfdownload.tooltip.openPDFButton;</label>
		</vbox>
		<spacer flex="1"/>
	</tooltip>

	<tooltip id="viewHTMLTooltip" orient="vertical"
	   onpopupshowing="return onTooltipPopupShowing(this);">
		<vbox>
			<label class="tooltipTitle">&pdfdownload.viewHtmlButton;</label>
			<label>&pdfdownload.tooltip.viewHtmlButton;</label>
		</vbox>
		<spacer flex="1"/>
	</tooltip>

	<tooltip id="openWithoutExtensionTooltip" orient="vertical"
	   onpopupshowing="return onTooltipPopupShowing(this);">
		<vbox>
			<label class="tooltipTitle">&pdfdownload.openWithoutExtension;</label>
			<label>&pdfdownload.tooltip.openWithoutExtensionButton;</label>
		</vbox>
		<spacer flex="1"/>
	</tooltip>

	<tooltip id="cancelTooltip" orient="vertical"
	   onpopupshowing="return onTooltipPopupShowing(this);">
		<vbox>
			<label class="tooltipTitle">&pdfdownload.cancelButton;</label>
			<label>&pdfdownload.tooltip.cancelButton;</label>
		</vbox>
		<spacer flex="1"/>
	</tooltip>


	<hbox>
		<vbox pack="center">
			<image src="chrome://pdfdownload/skin/popup_dialog_question_mark.gif"/>
		</vbox>
		<vbox flex="1">
			<separator class="thin"/>
			<description id="QuestionLabel" value=""/>    
			<separator class="thin"/>
			<hbox pack="center">    
				<button id="download-button" label="&pdfdownload.downloadButton;" oncommand="doDownload();" onmouseover="onMouseOver(event,'downloadTooltip',this)" onmouseout="onMouseOut('downloadTooltip')" />
				<button id="open-button" label="&pdfdownload.openButton;" oncommand="doOpen();" default="true" key="enter" onmouseover="onMouseOver(event,'openTooltip',this)" onmouseout="onMouseOut('openTooltip')"/>
				<button id="openHTML-button" label="&pdfdownload.viewHtmlButton;" oncommand="doOpenHtml();" onmouseover="onMouseOver(event,'viewHTMLTooltip',this)" onmouseout="onMouseOut('viewHTMLTooltip')"/>
				<button id="openWithoutExtension" label="&pdfdownload.openWithoutExtension;" oncommand="doOpenWithoutExtension();" onmouseover="onMouseOver(event,'openWithoutExtensionTooltip',this)" onmouseout="onMouseOut('openWithoutExtensionTooltip')"/>
				<button id="cancel-button" label="&pdfdownload.cancelButton;" oncommand="doCancel();" key="escape" onmouseover="onMouseOver(event,'cancelTooltip',this)" onmouseout="onMouseOut('cancelTooltip')"/>
			</hbox>
		</vbox>
	</hbox>
</window>